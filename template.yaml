AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  VirtualFeedEmpireWinesApp

  Sample SAM Template for VirtualFeedEmpireWinesApp

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 300
    Tracing: Active
  Api:
    TracingEnabled: true
Parameters:
  VpcSubnet:
    Type: AWS::SSM::Parameter::Value<List<AWS::EC2::Subnet::Id>>
    Description: SSM Parameter store key of type StringList with the list of VPC Subnet to be used by Lambda function
    Default: /sam/vpcSubnetsProd
  VpcSg:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::SecurityGroup::Id>
    Description: SSM Parameter store key of type String with the VPC Security Group to be used by Lambda function
    Default: /sam/vpcSgProd
  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod
  ExcelFileName:
    Type: String
    Description: Empire Wine's Excel File Name for Query output
    Default: empireWines.xlsx
  EmailFileName:
    Type: String
    Description: Empire Wine's File Name for Email attachment
    Default: "NY Products.xlsx"
  EmailAddressCc:
    Type: String
    Description: Empire Wine's Email CC address
    Default: customerservice@polanerselections.com
  EmailAddressTo:
    Type: String
    Description: Empire Wine's Email To address
    Default: criley@polanerselections.com
  EmailAddressFrom:
    Type: String
    Description: Empire Wine's Email From address
    Default: customerservice@polanerselections.com
  EmailSubject:
    Type: String
    Description: Empire Wine's Email Subject
    Default: "NY Products"
  SqlConnection:
    Type: String
    Description: SQL Connection String
    Default: "/sql/connection_string/odbc_18/portal"
  SqlSnapshotProcedure:
    Type: String
    Description: Empire Wine's SQL Procedure to take data snapshot
    Default: "[POL].[dbo].[EmpireWines_CreateSnapshot]"
  SqlQueryProcedure:
    Type: String
    Description: Empire Wine's SQL Procedure to query data snapshot
    Default: "[POL].[dbo].[EmpireWines_QuerySnapshot]"

Conditions:
  IsTestOnlyResource:
    !Equals [ !Ref Environment, dev ]

Resources:
  VirtualFeedEmpireWinesStateMachineSchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - scheduler.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VirtualFeedEmpireWinesStateMachineSchedulerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Sub "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:VirtualFeedEmpireWinesStateMachine_${Environment}"
      RoleName: !Sub VirtualFeedEmpireWinesStateMachineSchedulerRole_${Environment}

  VirtualFeedEmpireWinesStateMachineEventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VirtualFeedEmpireWinesStateMachineEventPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Sub "arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:VirtualFeedEmpireWinesStateMachineErrorTopic_${Environment}"
      RoleName: !Sub VirtualFeedEmpireWinesStateMachineEventRole_${Environment}

  VirtualFeedEmpireWinesStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VirtualFeedEmpireWinesStateMachinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: '*'
      RoleName: !Sub VirtualFeedEmpireWinesStateMachineRole_${Environment}


  VirtualFeedEmpireWinesStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub VirtualFeedEmpireWinesStateMachine_${Environment}
      DefinitionUri: statemachine/virtual_feed_empirewines.asl.json
      DefinitionSubstitutions:
        LambdaSqlProcSnapshotFunctionName: !Ref VirtualFeedEmpireWinesSqlProcSnapshotFunction
        LambdaSqlQueryExportFunctionName: !Ref VirtualFeedEmpireWinesSqlQueryExportFunction
        LambdaEmailFileFunctionName: !Ref VirtualFeedEmpireWinesEmailFileFunction
      Role: !GetAtt VirtualFeedEmpireWinesStateMachineRole.Arn
      Events:
        ScheduleStateMachine:
          Type: ScheduleV2
          Properties:
            Name: !Sub VirtualFeedEmpireWinesStateMachine_${Environment}
            Description: Schedule to execute Empire Wines Virtual Feed State Machine on the 22nd of the month at 6am EST
            RoleArn: !GetAtt VirtualFeedEmpireWinesStateMachineSchedulerRole.Arn
            ScheduleExpression: "cron(6 0 22 * ? *)"
            ScheduleExpressionTimezone: "America/New_York"
            FlexibleTimeWindow:
              Mode: FLEXIBLE
              MaximumWindowInMinutes: 15
            RetryPolicy:
              MaximumRetryAttempts: 5
              MaximumEventAgeInSeconds: 900

  VirtualFeedEmpireWinesStateMachineFailureEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub VirtualFeedEmpireWinesStateMachineFailureEventRule_${Environment}
      Description: "Send SNS alert upon VirtualFeedEmpireWinesStateMachine Failure"
      EventPattern:
        source:
          - aws.states
        detail-type:
          - Step Functions Execution Status Change
        detail:
          status:
            - FAILED
            - ABORTED
            - TIMED_OUT
          stateMachineArn:
            - !Ref VirtualFeedEmpireWinesStateMachine
      Targets:
        - Arn: !Ref VirtualFeedEmpireWinesStateMachineErrorTopic
          Id: !Sub VirtualFeedEmpireWinesStateMachineErrorTopic_${Environment}

  VirtualFeedEmpireWinesStateMachineErrorTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub VirtualFeedEmpireWinesStateMachineErrorTopic_${Environment}
      Subscription:
        - Endpoint: itadmin@polanerselections.com
          Protocol: email

  VirtualFeedEmpireWinesErrorTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: AllowPublishToTopic
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: 'sns:Publish'
            Resource:
              - !Ref VirtualFeedEmpireWinesStateMachineErrorTopic
      Topics:
        - !Ref VirtualFeedEmpireWinesStateMachineErrorTopic

  VirtualFeedEmpireWinesEmailFileFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VirtualFeedEmpireWinesEmailFileFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${VirtualFeedEmpireWinesOutputS3}
                  - !Sub arn:${AWS::Partition}:s3:::${VirtualFeedEmpireWinesOutputS3}/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      RoleName:
        !Sub VirtualFeedEmpireWinesEmailFileFunctionRole_${Environment}

  VirtualFeedEmpireWinesEmailFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/ExcelEmailFunction/
      Role: !GetAtt VirtualFeedEmpireWinesEmailFileFunctionRole.Arn
      FunctionName: !Sub VirtualFeedEmpireWinesEmailFileFunction_${Environment}
      Environment:
        Variables:
          BUCKET_NAME: !Ref VirtualFeedEmpireWinesOutputS3
          FILE_NAME: !Ref ExcelFileName
          EMAIL_ATTACHMENT: !Ref EmailFileName
          EMAIL_CC: !Ref EmailAddressCc
          EMAIL_TO: !Ref EmailAddressTo
          EMAIL_FROM: !Ref EmailAddressFrom
          EMAIL_SUBJECT: !Ref EmailSubject
      Handler: app.lambda_handler
      Runtime: python3.11
      LoggingConfig:
        LogGroup: !Ref VirtualFeedEmpireWinesEmailFileFunctionLogGroup
      Architectures:
        - x86_64

  VirtualFeedEmpireWinesEmailFileFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/VirtualFeedEmpireWinesEmailFileFunctionLogGroup_${Environment}
      RetentionInDays: 7

  VirtualFeedEmpireWinesSqlProcSnapshotFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VirtualFeedEmpireWinesSqlProcSnapshotFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                  - lambda:InvokeFunction
                Resource: '*'
      RoleName: !Sub VirtualFeedEmpireWinesSqlProcSnapshotFunctionRole_${Environment}

  VirtualFeedEmpireWinesSqlProcSnapshotFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/SqlProcSnapshotFunction/
      Role: !GetAtt VirtualFeedEmpireWinesSqlProcSnapshotFunctionRole.Arn
      FunctionName: !Sub VirtualFeedEmpireWinesSqlProcSnapshotFunction_${Environment}
      Layers:
        - arn:aws:lambda:us-east-1:424371521123:layer:pyodbc-311:4
      Environment:
        Variables:
          SQL_CONNECTION: !Ref SqlConnection
          SQL_PROC: !Ref SqlSnapshotProcedure
      Handler: app.lambda_handler
      Runtime: python3.11
      VpcConfig:
        SubnetIds: !Ref VpcSubnet
        SecurityGroupIds:
          - !Ref VpcSg
      LoggingConfig:
        LogGroup: !Ref VirtualFeedEmpireWinesSqlProcSnapshotFunctionLogGroup
      Architectures:
        - x86_64

  VirtualFeedEmpireWinesSqlProcSnapshotFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/VirtualFeedEmpireWinesSqlProcSnapshotFunctionLogGroup_${Environment}
      RetentionInDays: 7

  VirtualFeedEmpireWinesSqlQueryExportFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: VirtualFeedEmpireWinesSqlQueryExportFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                  - lambda:InvokeFunction
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:*
                  - s3-object-lambda:*
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${VirtualFeedEmpireWinesOutputS3}
                  - !Sub arn:${AWS::Partition}:s3:::${VirtualFeedEmpireWinesOutputS3}/*
      RoleName:
        !Sub VirtualFeedEmpireWinesSqlQueryExportFunctionRole_${Environment}

  VirtualFeedEmpireWinesSqlQueryExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/SqlQueryExportFunction/
      Role: !GetAtt VirtualFeedEmpireWinesSqlQueryExportFunctionRole.Arn
      FunctionName: !Sub VirtualFeedEmpireWinesSqlQueryExportFunction_${Environment}
      Layers:
        - arn:aws:lambda:us-east-1:424371521123:layer:pyodbc-311:4
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python311:9
      Environment:
        Variables:
          SQL_CONNECTION: !Ref SqlConnection
          SQL_PROC: !Ref SqlQueryProcedure
          FILE_NAME: !Ref ExcelFileName
          BUCKET_NAME: !Ref VirtualFeedEmpireWinesOutputS3
      Handler: app.lambda_handler
      Runtime: python3.11
      VpcConfig:
        SubnetIds: !Ref VpcSubnet
        SecurityGroupIds:
          - !Ref VpcSg
      LoggingConfig:
        LogGroup: !Ref VirtualFeedEmpireWinesSqlQueryExportFunctionLogGroup
      Architectures:
        - x86_64

  VirtualFeedEmpireWinesSqlQueryExportFunctionLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: !Sub /aws/lambda/VirtualFeedEmpireWinesSqlQueryExportFunctionLogGroup_${Environment}
        RetentionInDays: 7

  VirtualFeedEmpireWinesOutputS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub polaner-virtual-feed-empirewines-output-${Environment}
      LifecycleConfiguration:
        Rules:
          - Id: DeleteContentAfter6Months
            Status: 'Enabled'
            ExpirationInDays: 180

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'

Outputs:
  VirtualFeedEmpireWinesStateMachineArn:
    Description: Virtual Feed Empire Wines State machine ARN
    Value: !Ref VirtualFeedEmpireWinesStateMachine
  VirtualFeedEmpireWinesStateMachineRoleArn:
    Description: IAM Role created for Empir eWines State Machine based on the specified
      SAM Policy Templates
    Value: !GetAtt VirtualFeedEmpireWinesStateMachineRole.Arn